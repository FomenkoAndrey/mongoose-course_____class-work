import mongoose from 'mongoose'
import { dbConfig } from '../common/dbConfig.mjs'
import chalk from 'chalk'
import { dropCollectionByName } from '../helpers/dropCollectionByName.mjs'

const sessionSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  token: { type: String, required: true },
  createdAt: {
    type: Date,
    default: Date.now,
    expires: 60
  }
})

const tempCodeSchema = new mongoose.Schema({
  code: { type: String, required: true },
  userId: { type: String, required: true },
  purpose: { type: String, required: true },
  expiresAt: {
    type: Date,
    default: Date.now
  }
})

tempCodeSchema.index(
  { expiresAt: 1 },
  { expireAfterSeconds: 30 }
)

const Session = mongoose.model('session', sessionSchema)
const TempCode = mongoose.model('tempcode', tempCodeSchema)

async function run() {
  try {
    await mongoose.connect(dbConfig.uri, dbConfig.options)
    console.log(chalk.magentaBright('Connected to the database'))

    await dropCollectionByName('sessions')
    await dropCollectionByName('tempcodes')

    try {
      console.log(chalk.cyanBright('--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è TTL —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))
      try {
        await Session.createIndexes()
        await TempCode.createIndexes()
        console.log(chalk.greenBright('‚úÖ TTL —ñ–Ω–¥–µ–∫—Å–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤:'), error.message)
        return
      }

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---'))

      await Session.create([
        { userId: 'user1', token: 'token_abc123' },
        { userId: 'user2', token: 'token_def456' },
        { userId: 'user3', token: 'token_ghi789' }
      ])
      console.log(chalk.greenBright('‚úÖ 3 —Å–µ—Å—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ'))

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –∫–æ–¥—ñ–≤ ---'))

      await TempCode.create([
        { code: '123456', userId: 'user1', purpose: 'email_verification' },
        { code: '789012', userId: 'user2', purpose: 'password_reset' }
      ])
      console.log(chalk.greenBright('‚úÖ 2 —Ç–∏–º—á–∞—Å–æ–≤—ñ –∫–æ–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ'))

      let sessionCount = await Session.countDocuments()
      let codeCount = await TempCode.countDocuments()
      console.log(chalk.yellowBright(`\nüìä –ó–∞—Ä–∞–∑ –≤ –±–∞–∑—ñ: ${sessionCount} —Å–µ—Å—ñ–π, ${codeCount} –∫–æ–¥—ñ–≤`))

      console.log(chalk.magentaBright('\n‚è≥ –ß–µ–∫–∞—î–º–æ 15 —Å–µ–∫—É–Ω–¥...'))
      await new Promise((resolve) => setTimeout(resolve, 15000))

      sessionCount = await Session.countDocuments()
      codeCount = await TempCode.countDocuments()
      console.log(chalk.yellowBright(`üìä –ß–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥: ${sessionCount} —Å–µ—Å—ñ–π, ${codeCount} –∫–æ–¥—ñ–≤`))

      console.log(chalk.magentaBright('\n‚è≥ –ß–µ–∫–∞—î–º–æ —â–µ 20 —Å–µ–∫—É–Ω–¥ (–∑–∞–≥–∞–ª–æ–º 35 —Å–µ–∫—É–Ω–¥)...'))
      await new Promise((resolve) => setTimeout(resolve, 20000))

      sessionCount = await Session.countDocuments()
      codeCount = await TempCode.countDocuments()
      console.log(chalk.yellowBright(`üìä –ß–µ—Ä–µ–∑ 35 —Å–µ–∫—É–Ω–¥: ${sessionCount} —Å–µ—Å—ñ–π, ${codeCount} –∫–æ–¥—ñ–≤`))

      if (codeCount === 0) {
        console.log(chalk.greenBright('‚úÖ –¢–∏–º—á–∞—Å–æ–≤—ñ –∫–æ–¥–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥!'))
      }

      console.log(chalk.magentaBright('\n‚è≥ –ß–µ–∫–∞—î–º–æ —â–µ 70 —Å–µ–∫—É–Ω–¥ (–∑–∞–≥–∞–ª–æ–º 105 —Å–µ–∫—É–Ω–¥)...'))
      await new Promise((resolve) => setTimeout(resolve, 70000))

      sessionCount = await Session.countDocuments()
      codeCount = await TempCode.countDocuments()
      console.log(chalk.yellowBright(`üìä –ß–µ—Ä–µ–∑ 105 —Å–µ–∫—É–Ω–¥: ${sessionCount} —Å–µ—Å—ñ–π, ${codeCount} –∫–æ–¥—ñ–≤`))

      if (sessionCount === 0) {
        console.log(chalk.greenBright('‚úÖ –°–µ—Å—ñ—ó –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥!'))
      }

      if (codeCount === 0) {
        console.log(chalk.greenBright('‚úÖ –¢–∏–º—á–∞—Å–æ–≤—ñ –∫–æ–¥–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (TTL 30 —Å–µ–∫—É–Ω–¥, —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é)'))
      }

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó ---'))
      await Session.create({ userId: 'user4', token: 'token_new123' })

      const newSessionCount = await Session.countDocuments()
      console.log(chalk.greenBright(`‚úÖ –ù–æ–≤–∞ —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞. –í—Å—å–æ–≥–æ —Å–µ—Å—ñ–π: ${newSessionCount}`))
      console.log(chalk.magentaBright('üîÑ TTL —ñ–Ω–¥–µ–∫—Å –±—É–¥–µ –≤–∏–¥–∞–ª—è—Ç–∏ —ñ —Ü—é —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ 60-120 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —ó—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'))
    } catch (error) {
      console.log(chalk.bgRedBright('Error with operations:'), error.message)
    }
  } catch (error) {
    console.error('Error connecting to MongoDB:', error)
  } finally {
    await mongoose.disconnect()
  }
}

run()
