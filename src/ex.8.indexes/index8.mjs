// noinspection D

import mongoose from 'mongoose'
import { dbConfig } from '../common/dbConfig.mjs'
import chalk from 'chalk'
import { dropCollectionByName } from '../helpers/dropCollectionByName.mjs'

const taskSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String },
  priority: { type: Number, default: 1 },
  status: { type: String, enum: ['pending', 'in_progress', 'completed'], default: 'pending' },
  assignee: { type: String },
  dueDate: { type: Date },
  createdAt: { type: Date, default: Date.now }
})

taskSchema.index({ title: 1 })
taskSchema.index({ status: 1, priority: -1 })
taskSchema.index({ assignee: 1 })
taskSchema.index({ dueDate: 1 })

const Task = mongoose.model('task', taskSchema)

async function run() {
  try {
    await mongoose.connect(dbConfig.uri, dbConfig.options)
    console.log(chalk.magentaBright('Connected to the database'))

    await dropCollectionByName('tasks')

    try {
      console.log(chalk.cyanBright('--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å ---'))

      await Task.create([
        {
          title: 'Setup project',
          description: 'Initialize new project',
          priority: 3,
          status: 'completed',
          assignee: 'john'
        },
        { title: 'Write tests', description: 'Add unit tests', priority: 2, status: 'in_progress', assignee: 'jane' },
        {
          title: 'Deploy to staging',
          description: 'Deploy latest version',
          priority: 1,
          status: 'pending',
          assignee: 'bob'
        },
        { title: 'Code review', description: 'Review pull request', priority: 2, status: 'pending', assignee: 'alice' }
      ])
      console.log(chalk.greenBright('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω—ñ'))

      console.log(chalk.cyanBright('\n--- üìã –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))
      const allIndexes = await Task.listIndexes()
      console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω–¥–µ–∫—Å—ñ–≤: ${allIndexes.length}`)

      allIndexes.forEach((index, i) => {
        console.log(`${i + 1}. ${chalk.yellowBright(index.name)}:`)
        console.log(`   –ö–ª—é—á—ñ: ${JSON.stringify(index.key)}`)
        if (index.unique) console.log(`   –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π: ${index.unique}`)
        if (index.sparse) console.log(`   –†–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π: ${index.sparse}`)
        if (index.expireAfterSeconds) console.log(`   TTL: ${index.expireAfterSeconds} —Å–µ–∫—É–Ω–¥`)
      })

      console.log(chalk.cyanBright('\n--- üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))

      try {
        await Task.collection.createIndex(
          { title: 'text', description: 'text' },
          { name: 'task_text_search' }
        )
        console.log(chalk.greenBright('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      try {
        await Task.collection.createIndex(
          { status: 1, dueDate: 1, priority: -1 },
          { name: 'status_due_priority_index' }
        )
        console.log(chalk.greenBright('‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- üìã –ü–µ—Ä–µ–≥–ª—è–¥ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è ---'))
      const updatedIndexes = await Task.listIndexes()
      console.log(`–¢–µ–ø–µ—Ä —ñ–Ω–¥–µ–∫—Å—ñ–≤: ${updatedIndexes.length}`)
      updatedIndexes.forEach((index) => {
        console.log(`   üîç ${index.name}`)
      })

      console.log(chalk.cyanBright('\n--- üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É ---'))
      try {
        await Task.collection.dropIndex('assignee_1')
        console.log(chalk.greenBright('‚úÖ –Ü–Ω–¥–µ–∫—Å "assignee_1" –≤–∏–¥–∞–ª–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∑–∞ –∫–ª—é—á–∞–º–∏ ---'))
      try {
        await Task.collection.dropIndex({ dueDate: 1 })
        console.log(chalk.greenBright('‚úÖ –Ü–Ω–¥–µ–∫—Å –∑–∞ dueDate –≤–∏–¥–∞–ª–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- üìã –ü–µ—Ä–µ–≥–ª—è–¥ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ---'))
      const afterDeleteIndexes = await Task.listIndexes()
      console.log(`–ó–∞–ª–∏—à–∏–ª–æ—Å—å —ñ–Ω–¥–µ–∫—Å—ñ–≤: ${afterDeleteIndexes.length}`)
      afterDeleteIndexes.forEach((index) => {
        console.log(`   üîç ${index.name}`)
      })

      console.log(chalk.cyanBright('\n--- üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))
      try {
        const syncResult = await Task.syncIndexes()
        console.log(chalk.greenBright('‚úÖ –Ü–Ω–¥–µ–∫—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ'))

        if (syncResult.length > 0) {
          console.log('–í–∏–¥–∞–ª–µ–Ω—ñ –∑–∞–π–≤—ñ —ñ–Ω–¥–µ–∫—Å–∏:')
          syncResult.forEach((index) => {
            console.log(`   ‚ùå ${index}`)
          })
        } else {
          console.log('–ñ–æ–¥–Ω–∏—Ö –∑–∞–π–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        }
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- üìã –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))
      const finalIndexes = await Task.listIndexes()
      console.log(`–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω–¥–µ–∫—Å—ñ–≤: ${finalIndexes.length}`)
      finalIndexes.forEach((index) => {
        console.log(`   üîç ${index.name}: ${JSON.stringify(index.key)}`)
      })

      console.log(chalk.cyanBright('\n--- üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ ---'))

      const pendingTasks = await Task.find({ status: 'pending' }).sort({ priority: -1 })
      console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ pending –∑–∞–≤–¥–∞–Ω—å: ${pendingTasks.length}`)

      const explainResult = await Task.find({ status: 'in_progress' }).explain('executionStats')
      const stage = explainResult.executionStats.executionStages
      console.log(`üéØ –¢–∏–ø —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: ${stage.stage}`)
      if (stage.indexName) {
        console.log(`üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: ${stage.indexName}`)
      }

    } catch (error) {
      console.log(chalk.bgRedBright('Error with operations:'), error.message)
    }
  } catch (error) {
    console.error('Error connecting to MongoDB:', error)
  } finally {
    await mongoose.disconnect()
  }
}

run()
