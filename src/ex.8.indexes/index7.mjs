import mongoose from 'mongoose'
import { dbConfig } from '../common/dbConfig.mjs'
import chalk from 'chalk'
import { dropCollectionByName } from '../helpers/dropCollectionByName.mjs'

const productSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    price: { type: Number, required: true },
    category: { type: String, required: true },
    description: { type: String },
    inStock: { type: Boolean, default: true }
  },
  {
    autoIndex: false
  }
)

productSchema.index({ name: 1 })
productSchema.index({ price: -1 })
productSchema.index({ category: 1, price: -1 })
productSchema.index({ inStock: 1 })

const Product = mongoose.model('product', productSchema)

async function run() {
  try {
    await mongoose.connect(dbConfig.uri, dbConfig.options)
    console.log(chalk.magentaBright('Connected to the database'))

    await dropCollectionByName('products')

    try {
      console.log(chalk.cyanBright('--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ (–±–µ–∑ —ñ–Ω–¥–µ–∫—Å—ñ–≤) ---'))

      await Product.create([
        { name: 'iPhone 15', price: 999, category: 'electronics', description: 'Latest smartphone' },
        { name: 'MacBook Pro', price: 2499, category: 'electronics', description: 'Professional laptop' },
        { name: 'T-shirt', price: 29, category: 'clothing', description: 'Cotton t-shirt' },
        { name: 'Coffee Maker', price: 199, category: 'appliances', description: 'Automatic coffee maker' }
      ])
      console.log(chalk.greenBright('‚úÖ –¢–æ–≤–∞—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ'))

      console.log(chalk.cyanBright('\n--- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ü–ï–†–ï–î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º ---'))
      let indexes = await Product.listIndexes()
      console.log(
        'üìã –ù–∞—è–≤–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏:',
        indexes.map((idx) => idx.name)
      )

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∑—ñ —Å—Ö–µ–º–∏ ---'))
      try {
        await Product.createIndexes()
        console.log(chalk.greenBright('\n‚úÖ –í—Å—ñ —ñ–Ω–¥–µ–∫—Å–∏ –∑—ñ —Å—Ö–µ–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É ---'))
      try {
        await Product.collection.createIndex(
          { name: 'text', description: 'text' },
          {
            background: true,
            name: 'text_search_index'
          }
        )
        console.log(chalk.greenBright('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É ---'))
      try {
        await Product.collection.createIndex(
          { category: 1, inStock: 1, price: -1 },
          {
            name: 'category_stock_price_index',
            background: true
          }
        )
        console.log(chalk.greenBright('‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ'))
      } catch (error) {
        console.log(chalk.redBright('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É:'), error.message)
      }

      console.log(chalk.cyanBright('\n--- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ü–Ü–°–õ–Ø —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ---'))
      indexes = await Product.listIndexes()
      console.log('üìã –í—Å—ñ —ñ–Ω–¥–µ–∫—Å–∏:')
      indexes.forEach((index) => {
        console.log(`   üîç ${index.name}: ${JSON.stringify(index.key)}`)
      })

      console.log(chalk.cyanBright('\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —ñ–Ω–¥–µ–∫—Å—ñ–≤ ---'))

      const phoneQuery = await Product.find({ name: 'iPhone 15' })
      console.log(`üì± –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–∞–∑–≤–æ—é: ${phoneQuery.length} —Ç–æ–≤–∞—Ä—ñ–≤`)

      const electronicsCheap = await Product.find({
        category: 'electronics',
        price: { $lt: 1500 }
      })
      console.log(`üíª –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞ –¥–µ—à–µ–≤—à–µ $1500: ${electronicsCheap.length} —Ç–æ–≤–∞—Ä—ñ–≤`)

      const textSearch = await Product.find({ $text: { $search: 'smartphone laptop' } })
      console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º: ${textSearch.length} —Ç–æ–≤–∞—Ä—ñ–≤`)

      console.log(chalk.cyanBright('\n--- –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É ---'))
      const explainResult = await Product.find({ category: 'electronics' }).explain('executionStats')
      const stage = explainResult.executionStats.executionStages
      const execStats = explainResult.executionStats

      console.log(`üéØ –¢–∏–ø —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: ${stage.stage}`)
      if (stage.indexName) {
        console.log(`üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: ${stage.indexName}`)
      }
      console.log(`üìà –û–≥–ª—è–Ω—É—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${execStats.totalDocsExamined}`)
      console.log(`üìÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${execStats.nReturned}`)

    } catch (error) {
      console.log(chalk.bgRedBright('Error with operations:'), error.message)
    }
  } catch (error) {
    console.error('Error connecting to MongoDB:', error)
  } finally {
    await mongoose.disconnect()
  }
}

run()
